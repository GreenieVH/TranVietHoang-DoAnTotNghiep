const { OAuth2Client } = require("google-auth-library");
const jwt = require("jsonwebtoken");
const pool = require("../config/db"); // Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ ƒë·ªëi t∆∞·ª£ng db t·ª´ Sequelize

const REFRESH_KEY = process.env.REFRESH_TOKEN_SECRET;

const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

const googleAuthController = async (req, res) => {
  try {
    const { token } = req.body;

    // Verify token t·ª´ Google
    const ticket = await client.verifyIdToken({
      idToken: token,
      audience: process.env.GOOGLE_CLIENT_ID, // M√£ client ID c·ªßa b·∫°n
    });

    const payload = ticket.getPayload();
    const { email, name, picture, sub: googleId } = payload;

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i ch∆∞a trong c∆° s·ªü d·ªØ li·ªáu PostgreSQL
    const result = await pool.query("SELECT * FROM users WHERE email = $1", [
      email,
    ]);

    let user = result.rows[0];

    // N·∫øu ch∆∞a c√≥ user, t·∫°o m·ªõi
    if (!user) {
      const insertResult = await pool.query(
        "INSERT INTO users (email, username, img, password) VALUES ($1, $2, $3, $4) RETURNING *",
        [email, name, picture, ''] // Kh√¥ng c·∫ßn m·∫≠t kh·∫©u khi ƒëƒÉng nh·∫≠p qua Google
      );
      user = insertResult.rows[0];
    }
    // T·∫°o refreshToken
    const refreshToken = jwt.sign({ id: user.id, email }, REFRESH_KEY, {
        expiresIn: "15d",
      });
    // L∆∞u refreshToken v√†o CSDL
    await pool.query("UPDATE users SET refresh_token = $1 WHERE id = $2", [
        refreshToken,
        user.id,
      ]);

    // T·∫°o JWT cho ng∆∞·ªùi d√πng sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    const accessToken = jwt.sign({ userId: user.id }, process.env.JWT_SECRET, {
      expiresIn: "10d",
    });

    // üî• L∆∞u refreshToken v√†o HttpOnly Cookie
    res.cookie("refreshToken", refreshToken, {
        httpOnly: true, // NgƒÉn JavaScript truy c·∫≠p
        secure: true, // B·∫≠t khi d√πng HTTPS
        sameSite: "None", // H·ªó tr·ª£ CORS
        maxAge: 15 * 24 * 60 * 60 * 1000, // 15 ng√†y
      });

    // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng v√† accessToken
    return res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      accessToken
    });
  } catch (error) {
    console.error("Google auth error:", error);
    return res
      .status(500)
      .json({ error: "ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng nh·∫≠p qua Google." });
  }
};

module.exports = googleAuthController;
